# -*- coding: utf-8 -*-
"""Learning  Google Colab -  Mod 01 - SIGMOIDAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17nS1_ez8DcV37MB_jdtetpHSjDp4eHB4

# Analyzing data of Company **'ABC'** using **PYTHON**
---
---

In this project, we will analyze inventory data from the company ***ABC*** using Python and one of the most widely used libraries when it comes to Data Analysis with Python: **Pandas**. 

---
---

### Importing a library to manipulate spreadsheets

* **Pandas** library was imported to assist us in this work of data analysis.

* **Pandas** is an extremely powerful Open Source Python library that is widely used for data analysis. One of its facilities is the tabular presentation (by tables) of the data, which is very similar to the Excel format that we are used to.


As the *** Pandas *** library is too big a name to be typed at all times on our notebook. It is common for data scientists to use *** aliases *** for libraries. We do this using the reserved word *** as ***.

So when we type:

* **import pandas as pd**
"""

# importing packages
import pandas as pd

# importaring Excel spread sheet
excelSpreadSheet = pd.read_excel("/controle_da_empresa.xlsx", None)

excelSheet

# viewing "Vendas" tab on excelSheet
excelSpreadSheet["Vendas"]

# checking the quantity of tabs existing on spreadsheet
excelSpreadSheet.keys ()

# accessing a column within a tab - sheet['tab']['column'].
excelSheet["Vendas"]["Total de Vendas"]

# summing values of a column
excelSpreadSheet["Vendas"]["Total de Vendas"].sum()

# calculating the arithmetic mean of the values of a column
excelSpreadSheet["Vendas"]["Total de Vendas"].mean()

"""Within a statistical analysis, it is very important to understand the distribution of the data that we are working on, and one of the aspects that we need to analyze is the standard deviation.

In simple terms, the ***standard deviation*** is how much the analyzed values vary from the mean of the set.

With Python, finding that value is very easy. Just use the command ***std***, which comes from Standard Deviation, an English term for standard deviation. 
"""

# calculating the standard deviation of a column
excelSpreadSheet['Vendas']['Total de Vendas'].std()

"""### Generating charts with spreadsheet data

Now that we’re able to load, view tabular data, and manipulate the data in our spreadsheet, it’s time to go further, and generate visualizations.

There are many Python libraries created specifically for visualizations, with high graphic power, capable of generating incredible, complete and complex visualizations.

But that does not mean that generating informative views needs to be difficult. Pandas himself makes our lives much easier, creating visualizations in a simple, practical, easy and effective way.

Pandas already comes with a bunch of things implemented, including the ability to plot graphics. 

it is possible to easily plot a Line Graph that shows the total sales in a given period of time.

On the X (horizontal) axis we have ***dates***, and on the Y (vertical) axis the ***total sales***.
"""

Sales = excelSpreadSheet['Vendas']

Sales

Sales["Total de Vendas"]

# plotting line graph
Sales.plot("Data da Venda", "Total de Vendas")

"""### Histograms

The Histogram is a statistical tool that helps us to verify the distribution of data. In simple terms, at certain intervals, we have bins, which receive data that are within that interval.

It is important not to confuse this visualization with bar graphs, as they are used for different purposes. Click here if you want to learn more

Anyway, plotting a histogram to see how much people usually spend, for example, is very simple:
"""

Sales.hist("Total de Vendas")

"""### Other date manipulations

***Python*** with **Pandas** also allows us to manipulate chronologically organized data.

Don't worry about that right now. This is just an example to show the possibilities we have with Python in relation to dates, and how working with dates in Python can be much easier than dealing with Excel spreadsheets.

When manipulating dates with Python, we can, for example, plot a histogram to analyze the distribution of sales by day of the week.
"""

Sales

Sales["Data da Venda"]

# viewing histogram of sales by day of the week
Sales["Data da Venda"].apply(lambda x: x.weekday()).hist(bins=7)